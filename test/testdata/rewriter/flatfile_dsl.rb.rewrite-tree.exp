class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Record><<C <todo sym>>> < (::<todo sym>)
    def self.flatfile<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    def self.from<<C <todo sym>>>(*_, &<blk>)
      <emptyTree>
    end

    def self.pattern<<C <todo sym>>>(*_, &<blk>)
      <emptyTree>
    end

    def self.field<<C <todo sym>>>(*_, &<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.keep_self_def(<self>, :"flatfile")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"from")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"pattern")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"field")
  end

  class <emptyTree>::<C Flatfile><<C <todo sym>>> < (<emptyTree>::<C Record>)
    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def foo<<C <todo sym>>>(&<blk>)
      nil
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:"arg0", ::T.untyped()).returns(::T.untyped())
    end

    def foo=<<C <todo sym>>>(arg0, &<blk>)
      nil
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def bar<<C <todo sym>>>(&<blk>)
      nil
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:"arg0", ::T.untyped()).returns(::T.untyped())
    end

    def bar=<<C <todo sym>>>(arg0, &<blk>)
      nil
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def baz<<C <todo sym>>>(&<blk>)
      nil
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:"arg0", ::T.untyped()).returns(::T.untyped())
    end

    def baz=<<C <todo sym>>>(arg0, &<blk>)
      nil
    end

    <self>.flatfile() do ||
      begin
        <self>.from(::<Magic>.<build-range>(1, 2, false), :"foo")
        <self>.pattern(::Regexp.new("A-Za-z", 0), :"bar")
        <self>.field(:"baz")
      end
    end

    ::Sorbet::Private::Static.keep_def(<self>, :"foo")

    ::Sorbet::Private::Static.keep_def(<self>, :"foo=")

    ::Sorbet::Private::Static.keep_def(<self>, :"bar")

    ::Sorbet::Private::Static.keep_def(<self>, :"bar=")

    ::Sorbet::Private::Static.keep_def(<self>, :"baz")

    ::Sorbet::Private::Static.keep_def(<self>, :"baz=")
  end

  t = <emptyTree>::<C Flatfile>.new()

  t.foo=(t.foo().+(1))

  t.bar=(t.bar().+(1))

  t.baz=(t.baz().+(1))
end

InsSeq{
  stats = [
    EmptyTree
    ClassDef{
      kind = class
      name = EmptyTree<<C <U <root>>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
        MethodDef{
          flags = {self}
          name = <U <static-init>><<N <U <static-init>> $CENSORED>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::<Magic>
                }
                fun = <U <define-top-class-or-module>>
                block = nullptr
                pos_args = 1
                args = [
                  ConstantLit{
                    orig = nullptr
                    symbol = ::A
                  }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::Sorbet::Private::Static
                }
                fun = <U keep_for_ide>
                block = nullptr
                pos_args = 1
                args = [
                  ConstantLit{
                    orig = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U A>>
                    }
                    symbol = ::A
                  }
                ]
              }
            ],
            expr = EmptyTree
          }
        }
      ]
    }
    ClassDef{
      kind = class
      name = ConstantLit{
        orig = UnresolvedConstantLit{
          scope = EmptyTree
          cnst = <C <U A>>
        }
        symbol = ::A
      }<<C <U A>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
        MethodDef{
          flags = {}
          name = <U has_while><<U has_while>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = While{
            cond = Literal{ value = 1 }
            body = Send{
              recv = Local{
                localVariable = <U <self>>
              }
              fun = <U has_while>
              block = nullptr
              pos_args = 0
              args = [
              ]
            }
          }
        }

        MethodDef{
          flags = {}
          name = <U has_constant_with_resolution_scope><<U has_constant_with_resolution_scope>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = ConstantLit{
            orig = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <C <U DOES_NOT_EXIST>>
            }
            symbol = ::Sorbet::Private::Static::StubModule
            resolutionScopes = [::A, ::<root>]
          }
        }

        MethodDef{
          flags = {}
          name = <U has_global_field><<U has_global_field>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = UnresolvedIdent{
            kind = Global
            name = <U $S>
          }
        }

        MethodDef{
          flags = {}
          name = <U has_class_field><<U has_class_field>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = UnresolvedIdent{
            kind = Class
            name = <U @@f>
          }
        }

        MethodDef{
          flags = {}
          name = <U has_next><<U has_next>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = Send{
            recv = Local{
              localVariable = <U <self>>
            }
            fun = <U loop>
            block = Block {
              args = [
              ]
              body = Next{ expr = EmptyTree }
            }
            pos_args = 0
            args = [
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U has_break><<U has_break>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = Send{
            recv = Local{
              localVariable = <U <self>>
            }
            fun = <U loop>
            block = Block {
              args = [
              ]
              body = Break{ expr = EmptyTree }
            }
            pos_args = 0
            args = [
            ]
          }
        }

        MethodDef{
          flags = {}
          name = <U has_return><<U has_return>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = Return{ expr = Literal{ value = 1 } }
        }

        MethodDef{
          flags = {}
          name = <U has_cast><<U has_cast>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::Sorbet::Private::Static
                }
                fun = <U keep_for_typechecking>
                block = nullptr
                pos_args = 1
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <C <U T>>
                      }
                      symbol = ::T
                    }
                    fun = <U nilable>
                    block = nullptr
                    pos_args = 1
                    args = [
                      ConstantLit{
                        orig = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <C <U Integer>>
                        }
                        symbol = ::Integer
                      }
                    ]
                  }
                ]
              }
            ],
            expr = Cast{
                cast = <U cast>,
                arg = Literal{ value = nil }
                type = Integer | NilClass,
            }

          }
        }

        MethodDef{
          flags = {self}
          name = <U <static-init>><<U <static-init>>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = InsSeq{
            stats = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::Sorbet::Private::Static
                }
                fun = <U keep_def>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :"has_while" }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::Sorbet::Private::Static
                }
                fun = <U keep_def>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :"has_constant_with_resolution_scope" }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::Sorbet::Private::Static
                }
                fun = <U keep_def>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :"has_global_field" }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::Sorbet::Private::Static
                }
                fun = <U keep_def>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :"has_class_field" }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::Sorbet::Private::Static
                }
                fun = <U keep_def>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :"has_next" }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::Sorbet::Private::Static
                }
                fun = <U keep_def>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :"has_break" }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::Sorbet::Private::Static
                }
                fun = <U keep_def>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :"has_return" }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::Sorbet::Private::Static
                }
                fun = <U keep_def>
                block = nullptr
                pos_args = 2
                args = [
                  Local{
                    localVariable = <U <self>>
                  }
                  Literal{ value = :"has_cast" }
                ]
              }
            ],
            expr = EmptyTree
          }
        }
      ]
    }
  ],
  expr = EmptyTree
}

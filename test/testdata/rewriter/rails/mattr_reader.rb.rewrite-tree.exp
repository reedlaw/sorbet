class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C GoodUsages><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def both<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def self.both<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def foo<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def self.foo<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def self.no_instance<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def self.bar<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(::T.untyped())
    end

    def self.no_instance_reader<<C <todo sym>>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.void()
    end

    def usages<<C <todo sym>>>(&<blk>)
      begin
        <self>.both()
        <self>.no_instance()
        <self>.no_instance_reader()
      end
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    ::Sorbet::Private::Static.keep_def(<self>, :"both")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"both")

    ::Sorbet::Private::Static.keep_def(<self>, :"foo")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"foo")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"no_instance")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"bar")

    ::Sorbet::Private::Static.keep_self_def(<self>, :"no_instance_reader")

    ::Sorbet::Private::Static.keep_def(<self>, :"usages")

    <self>.both()

    <self>.no_instance()

    <self>.no_instance_reader()
  end

  class <emptyTree>::<C IgnoredUsages><<C <todo sym>>> < (::<todo sym>)
    <self>.mattr_reader()

    <self>.mattr_reader(:"instance_accessor", false)

    <self>.mattr_reader("foo")
  end
end

begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::A)
        ::Sorbet::Private::Static.keep_for_ide(::A)
        <emptyTree>
      end
    end
  end
  class ::A<<C A>> < (::<todo sym>)
    def self.private(arg0, <blk>)
      <emptyTree>
    end

    def self.private_class_method(arg0, <blk>)
      <emptyTree>
    end

    def self.outer_static(<blk>)
      <self>.private_class_method(::Sorbet::Private::Static.keep_self_def(<self>, :"inner_static"))
    end

    def self.inner_static(<blk>)
      <emptyTree>
    end

    def outer_instance(<blk>)
      <self>.class().private(::Sorbet::Private::Static.keep_def(<self>, :"inner_instance"))
    end

    def inner_instance(<blk>)
      <emptyTree>
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.sig(<self>) do ||
          <self>.params(:"arg0", ::Integer).void()
        end
        ::Sorbet::Private::Static.sig(<self>) do ||
          <self>.params(:"arg0", ::Integer).void()
        end
        <self>.extend(::T::Sig)
        ::Sorbet::Private::Static.keep_self_def(<self>, :"private")
        ::Sorbet::Private::Static.keep_self_def(<self>, :"private_class_method")
        <self>.private_class_method(::Sorbet::Private::Static.keep_self_def(<self>, :"outer_static"))
        <self>.private(::Sorbet::Private::Static.keep_def(<self>, :"outer_instance"))
        <emptyTree>
      end
    end
  end
  <emptyTree>
end

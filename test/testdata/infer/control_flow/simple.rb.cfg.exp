digraph "simple.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$7: T.class_of(ControlFlow) = alias <C ControlFlow>\l<statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(ControlFlow))\l<cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$12: T.class_of(ControlFlow) = alias <C ControlFlow>\l<statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(ControlFlow))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0" {
    label = "::ControlFlow#orZero0";
    color = blue;
    "bb::ControlFlow#orZero0_0" [shape = invhouse];
    "bb::ControlFlow#orZero0_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_2" [style="bold"];
    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_3" [style="tapered"];

    "bb::ControlFlow#orZero0_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_1" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_2" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_3" [
        label = "block[id=3, rubyBlockId=0]()\l<returnTemp>$5: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$5: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_3" -> "bb::ControlFlow#orZero0_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0a" {
    label = "::ControlFlow#orZero0a";
    color = blue;
    "bb::ControlFlow#orZero0a_0" [shape = invhouse];
    "bb::ControlFlow#orZero0a_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0a_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: Integer = load_arg(a)\la: Integer\l"
    ];

    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_2" [style="bold"];
    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_3" [style="tapered"];

    "bb::ControlFlow#orZero0a_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_1" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_2" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_3" [
        label = "block[id=3, rubyBlockId=0]()\l<returnTemp>$5 = 0\l<returnMethodTemp>$2 = return <returnTemp>$5\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_3" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0n" {
    label = "::ControlFlow#orZero0n";
    color = blue;
    "bb::ControlFlow#orZero0n_0" [shape = invhouse];
    "bb::ControlFlow#orZero0n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\lb: T::Boolean = a: T.nilable(Integer).!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_2" [style="bold"];
    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_3" [style="tapered"];

    "bb::ControlFlow#orZero0n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_1" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<returnTemp>$6: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_2" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_3" [
        label = "block[id=3, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_3" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero1n" {
    label = "::ControlFlow#orZero1n";
    color = blue;
    "bb::ControlFlow#orZero1n_0" [shape = invhouse];
    "bb::ControlFlow#orZero1n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero1n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\l<cfgAlias>$7: T.class_of(Integer) = alias <C Integer>\l<statTemp>$4: T::Boolean = a: T.nilable(Integer).is_a?(<cfgAlias>$7: T.class_of(Integer))\lb: T::Boolean = <statTemp>$4: T::Boolean.!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_2" [style="bold"];
    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_3" [style="tapered"];

    "bb::ControlFlow#orZero1n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_1" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<returnTemp>$9: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_2" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_3" [
        label = "block[id=3, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_3" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero2" {
    label = "::ControlFlow#orZero2";
    color = blue;
    "bb::ControlFlow#orZero2_0" [shape = invhouse];
    "bb::ControlFlow#orZero2_1" [shape = parallelogram];

    "bb::ControlFlow#orZero2_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_3" [style="tapered"];

    "bb::ControlFlow#orZero2_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_1" -> "bb::ControlFlow#orZero2_1" [style="bold"];
    "bb::ControlFlow#orZero2_3" [
        label = "block[id=3, rubyBlockId=0]()\la: Integer(0) = 0\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_3" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_4" [
        label = "block[id=4, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: Integer = a\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_4" -> "bb::ControlFlow#orZero2_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3" {
    label = "::ControlFlow#orZero3";
    color = blue;
    "bb::ControlFlow#orZero3_0" [shape = invhouse];
    "bb::ControlFlow#orZero3_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_2" [style="bold"];
    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_3" [style="tapered"];

    "bb::ControlFlow#orZero3_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_1" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_2" [
        label = "block[id=2, rubyBlockId=0]()\l<statTemp>$5: Integer(1) = 1\l<statTemp>$6: Integer(2) = 2\l<ifTemp>$3: T::Boolean = <statTemp>$5: Integer(1).==(<statTemp>$6: Integer(2))\l<ifTemp>$3: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: NilClass = a\l<ifTemp>$3: NilClass\l"
    ];

    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_5" [
        label = "block[id=5, rubyBlockId=0]()\l<returnTemp>$7: Integer(1) = 1\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$7: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_5" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$8: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$8: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_6" -> "bb::ControlFlow#orZero3_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3n" {
    label = "::ControlFlow#orZero3n";
    color = blue;
    "bb::ControlFlow#orZero3n_0" [shape = invhouse];
    "bb::ControlFlow#orZero3n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_2" [style="bold"];
    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_3" [style="tapered"];

    "bb::ControlFlow#orZero3n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_1" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<statTemp>$6: Integer(1) = 1\l<statTemp>$7: Integer(2) = 2\l<statTemp>$4: T::Boolean = <statTemp>$6: Integer(1).==(<statTemp>$7: Integer(2))\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_2" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<statTemp>$4: NilClass = a\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_3" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_4" [
        label = "block[id=4, rubyBlockId=0](<statTemp>$4: T.nilable(T::Boolean))\lb: T::Boolean = <statTemp>$4: T.nilable(T::Boolean).!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_5" [style="bold"];
    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_6" [style="tapered"];

    "bb::ControlFlow#orZero3n_5" [
        label = "block[id=5, rubyBlockId=0]()\l<returnTemp>$9: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_5" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$10: Integer(1) = 1\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$10: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_6" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero4" {
    label = "::ControlFlow#orZero4";
    color = blue;
    "bb::ControlFlow#orZero4_0" [shape = invhouse];
    "bb::ControlFlow#orZero4_1" [shape = parallelogram];

    "bb::ControlFlow#orZero4_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_2" [style="bold"];
    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_3" [style="tapered"];

    "bb::ControlFlow#orZero4_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_1" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<ifTemp>$3: Integer = a\l<ifTemp>$3: Integer\l"
    ];

    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: TrueClass = true\l<ifTemp>$3: TrueClass\l"
    ];

    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_5" [
        label = "block[id=5, rubyBlockId=0](a: T.nilable(Integer))\l<returnMethodTemp>$2: T.noreturn = return a: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_5" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$6 = 0\l<returnMethodTemp>$2 = return <returnTemp>$6\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_6" -> "bb::ControlFlow#orZero4_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero5" {
    label = "::ControlFlow#orZero5";
    color = blue;
    "bb::ControlFlow#orZero5_0" [shape = invhouse];
    "bb::ControlFlow#orZero5_1" [shape = parallelogram];

    "bb::ControlFlow#orZero5_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_2" [style="bold"];
    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_3" [style="tapered"];

    "bb::ControlFlow#orZero5_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_1" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<ifTemp>$3: TrueClass = true\l<ifTemp>$3: TrueClass\l"
    ];

    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: NilClass = a\l<ifTemp>$3: NilClass\l"
    ];

    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_5" [
        label = "block[id=5, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_5" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$6: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_6" -> "bb::ControlFlow#orZero5_1" [style="bold"];
}

subgraph "cluster_::<Class:ControlFlow>#<static-init>" {
    label = "::<Class:ControlFlow>#<static-init>";
    color = blue;
    "bb::<Class:ControlFlow>#<static-init>_0" [shape = invhouse];
    "bb::<Class:ControlFlow>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:ControlFlow>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(ControlFlow) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U ControlFlow>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U ControlFlow>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$8: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_0" -> "bb::<Class:ControlFlow>#<static-init>_2" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_1" -> "bb::<Class:ControlFlow>#<static-init>_1" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_2" [
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(ControlFlow))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_2" -> "bb::<Class:ControlFlow>#<static-init>_5" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_2" -> "bb::<Class:ControlFlow>#<static-init>_3" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_3" [
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(ControlFlow))\l<statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$8\l<cfgAlias>$27: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$29: Sorbet::Private::Static::Void = <cfgAlias>$27: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$30: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_3" -> "bb::<Class:ControlFlow>#<static-init>_6" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_5" [
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(ControlFlow))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$14: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$17: T.class_of(T) = alias <C T>\l<cfgAlias>$19: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$21: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$15: <Type: T.nilable(Integer)> = <cfgAlias>$17: T.class_of(T).any(<cfgAlias>$19: T.class_of(Integer), <cfgAlias>$21: T.class_of(NilClass))\l<statTemp>$12: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$14: Symbol(:\"a\"), <hashTemp>$15: <Type: T.nilable(Integer)>)\l<cfgAlias>$23: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$11: T::Private::Methods::DeclBuilder = <statTemp>$12: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$23: T.class_of(Integer))\l<blockReturnTemp>$24: T.noreturn = blockreturn<sig> <blockReturnTemp>$11: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_5" -> "bb::<Class:ControlFlow>#<static-init>_2" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_6" [
        label = "block[id=6, rubyBlockId=2](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$29: Sorbet::Private::Static::Void, <selfRestore>$30: T.class_of(ControlFlow))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_6" -> "bb::<Class:ControlFlow>#<static-init>_9" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_6" -> "bb::<Class:ControlFlow>#<static-init>_7" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_7" [
        label = "block[id=7, rubyBlockId=0](<block-pre-call-temp>$29: Sorbet::Private::Static::Void, <selfRestore>$30: T.class_of(ControlFlow))\l<statTemp>$25: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$29, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$30\l<cfgAlias>$44: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$46: Sorbet::Private::Static::Void = <cfgAlias>$44: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$47: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_7" -> "bb::<Class:ControlFlow>#<static-init>_10" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_9" [
        label = "block[id=9, rubyBlockId=2](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$29: Sorbet::Private::Static::Void, <selfRestore>$30: T.class_of(ControlFlow))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$36: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$38: T.class_of(Integer) = alias <C Integer>\l<statTemp>$34: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$36: Symbol(:\"a\"), <cfgAlias>$38: T.class_of(Integer))\l<cfgAlias>$40: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$33: T::Private::Methods::DeclBuilder = <statTemp>$34: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$40: T.class_of(Integer))\l<blockReturnTemp>$41: T.noreturn = blockreturn<sig> <blockReturnTemp>$33: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_9" -> "bb::<Class:ControlFlow>#<static-init>_6" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_10" [
        label = "block[id=10, rubyBlockId=3](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$46: Sorbet::Private::Static::Void, <selfRestore>$47: T.class_of(ControlFlow))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_10" -> "bb::<Class:ControlFlow>#<static-init>_13" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_10" -> "bb::<Class:ControlFlow>#<static-init>_11" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_11" [
        label = "block[id=11, rubyBlockId=0](<block-pre-call-temp>$46: Sorbet::Private::Static::Void, <selfRestore>$47: T.class_of(ControlFlow))\l<statTemp>$42: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$46, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$47\l<cfgAlias>$66: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$68: Sorbet::Private::Static::Void = <cfgAlias>$66: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$69: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_11" -> "bb::<Class:ControlFlow>#<static-init>_14" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_13" [
        label = "block[id=13, rubyBlockId=3](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$46: Sorbet::Private::Static::Void, <selfRestore>$47: T.class_of(ControlFlow))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$53: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$56: T.class_of(T) = alias <C T>\l<cfgAlias>$58: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$60: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$54: <Type: T.nilable(Integer)> = <cfgAlias>$56: T.class_of(T).any(<cfgAlias>$58: T.class_of(Integer), <cfgAlias>$60: T.class_of(NilClass))\l<statTemp>$51: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$53: Symbol(:\"a\"), <hashTemp>$54: <Type: T.nilable(Integer)>)\l<cfgAlias>$62: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$50: T::Private::Methods::DeclBuilder = <statTemp>$51: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$62: T.class_of(Integer))\l<blockReturnTemp>$63: T.noreturn = blockreturn<sig> <blockReturnTemp>$50: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_13" -> "bb::<Class:ControlFlow>#<static-init>_10" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_14" [
        label = "block[id=14, rubyBlockId=4](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$68: Sorbet::Private::Static::Void, <selfRestore>$69: T.class_of(ControlFlow))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_14" -> "bb::<Class:ControlFlow>#<static-init>_17" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_14" -> "bb::<Class:ControlFlow>#<static-init>_15" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_15" [
        label = "block[id=15, rubyBlockId=0](<block-pre-call-temp>$68: Sorbet::Private::Static::Void, <selfRestore>$69: T.class_of(ControlFlow))\l<statTemp>$64: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$68, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$69\l<cfgAlias>$88: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$90: Sorbet::Private::Static::Void = <cfgAlias>$88: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$91: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_15" -> "bb::<Class:ControlFlow>#<static-init>_18" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_17" [
        label = "block[id=17, rubyBlockId=4](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$68: Sorbet::Private::Static::Void, <selfRestore>$69: T.class_of(ControlFlow))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$75: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$78: T.class_of(T) = alias <C T>\l<cfgAlias>$80: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$82: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$76: <Type: T.nilable(Integer)> = <cfgAlias>$78: T.class_of(T).any(<cfgAlias>$80: T.class_of(Integer), <cfgAlias>$82: T.class_of(NilClass))\l<statTemp>$73: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$75: Symbol(:\"a\"), <hashTemp>$76: <Type: T.nilable(Integer)>)\l<cfgAlias>$84: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$72: T::Private::Methods::DeclBuilder = <statTemp>$73: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$84: T.class_of(Integer))\l<blockReturnTemp>$85: T.noreturn = blockreturn<sig> <blockReturnTemp>$72: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_17" -> "bb::<Class:ControlFlow>#<static-init>_14" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_18" [
        label = "block[id=18, rubyBlockId=5](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$90: Sorbet::Private::Static::Void, <selfRestore>$91: T.class_of(ControlFlow))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_18" -> "bb::<Class:ControlFlow>#<static-init>_21" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_18" -> "bb::<Class:ControlFlow>#<static-init>_19" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_19" [
        label = "block[id=19, rubyBlockId=0](<block-pre-call-temp>$90: Sorbet::Private::Static::Void, <selfRestore>$91: T.class_of(ControlFlow))\l<statTemp>$86: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$90, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$91\l<cfgAlias>$110: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$112: Sorbet::Private::Static::Void = <cfgAlias>$110: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$113: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_19" -> "bb::<Class:ControlFlow>#<static-init>_22" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_21" [
        label = "block[id=21, rubyBlockId=5](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$90: Sorbet::Private::Static::Void, <selfRestore>$91: T.class_of(ControlFlow))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$97: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$100: T.class_of(T) = alias <C T>\l<cfgAlias>$102: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$104: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$98: <Type: T.nilable(Integer)> = <cfgAlias>$100: T.class_of(T).any(<cfgAlias>$102: T.class_of(Integer), <cfgAlias>$104: T.class_of(NilClass))\l<statTemp>$95: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$97: Symbol(:\"a\"), <hashTemp>$98: <Type: T.nilable(Integer)>)\l<cfgAlias>$106: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$94: T::Private::Methods::DeclBuilder = <statTemp>$95: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$106: T.class_of(Integer))\l<blockReturnTemp>$107: T.noreturn = blockreturn<sig> <blockReturnTemp>$94: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_21" -> "bb::<Class:ControlFlow>#<static-init>_18" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_22" [
        label = "block[id=22, rubyBlockId=6](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$112: Sorbet::Private::Static::Void, <selfRestore>$113: T.class_of(ControlFlow))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_22" -> "bb::<Class:ControlFlow>#<static-init>_25" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_22" -> "bb::<Class:ControlFlow>#<static-init>_23" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_23" [
        label = "block[id=23, rubyBlockId=0](<block-pre-call-temp>$112: Sorbet::Private::Static::Void, <selfRestore>$113: T.class_of(ControlFlow))\l<statTemp>$108: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$112, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$113\l<cfgAlias>$132: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$134: Sorbet::Private::Static::Void = <cfgAlias>$132: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$135: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_23" -> "bb::<Class:ControlFlow>#<static-init>_26" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_25" [
        label = "block[id=25, rubyBlockId=6](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$112: Sorbet::Private::Static::Void, <selfRestore>$113: T.class_of(ControlFlow))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$119: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$122: T.class_of(T) = alias <C T>\l<cfgAlias>$124: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$126: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$120: <Type: T.nilable(Integer)> = <cfgAlias>$122: T.class_of(T).any(<cfgAlias>$124: T.class_of(Integer), <cfgAlias>$126: T.class_of(NilClass))\l<statTemp>$117: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$119: Symbol(:\"a\"), <hashTemp>$120: <Type: T.nilable(Integer)>)\l<cfgAlias>$128: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$116: T::Private::Methods::DeclBuilder = <statTemp>$117: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$128: T.class_of(Integer))\l<blockReturnTemp>$129: T.noreturn = blockreturn<sig> <blockReturnTemp>$116: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_25" -> "bb::<Class:ControlFlow>#<static-init>_22" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_26" [
        label = "block[id=26, rubyBlockId=7](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$134: Sorbet::Private::Static::Void, <selfRestore>$135: T.class_of(ControlFlow))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_26" -> "bb::<Class:ControlFlow>#<static-init>_29" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_26" -> "bb::<Class:ControlFlow>#<static-init>_27" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_27" [
        label = "block[id=27, rubyBlockId=0](<block-pre-call-temp>$134: Sorbet::Private::Static::Void, <selfRestore>$135: T.class_of(ControlFlow))\l<statTemp>$130: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$134, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$135\l<cfgAlias>$154: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$156: Sorbet::Private::Static::Void = <cfgAlias>$154: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$157: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_27" -> "bb::<Class:ControlFlow>#<static-init>_30" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_29" [
        label = "block[id=29, rubyBlockId=7](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$134: Sorbet::Private::Static::Void, <selfRestore>$135: T.class_of(ControlFlow))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$141: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$144: T.class_of(T) = alias <C T>\l<cfgAlias>$146: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$148: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$142: <Type: T.nilable(Integer)> = <cfgAlias>$144: T.class_of(T).any(<cfgAlias>$146: T.class_of(Integer), <cfgAlias>$148: T.class_of(NilClass))\l<statTemp>$139: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$141: Symbol(:\"a\"), <hashTemp>$142: <Type: T.nilable(Integer)>)\l<cfgAlias>$150: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$138: T::Private::Methods::DeclBuilder = <statTemp>$139: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$150: T.class_of(Integer))\l<blockReturnTemp>$151: T.noreturn = blockreturn<sig> <blockReturnTemp>$138: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_29" -> "bb::<Class:ControlFlow>#<static-init>_26" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_30" [
        label = "block[id=30, rubyBlockId=8](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$156: Sorbet::Private::Static::Void, <selfRestore>$157: T.class_of(ControlFlow))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_30" -> "bb::<Class:ControlFlow>#<static-init>_33" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_30" -> "bb::<Class:ControlFlow>#<static-init>_31" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_31" [
        label = "block[id=31, rubyBlockId=0](<block-pre-call-temp>$156: Sorbet::Private::Static::Void, <selfRestore>$157: T.class_of(ControlFlow))\l<statTemp>$152: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$156, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$157\l<cfgAlias>$176: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$178: Sorbet::Private::Static::Void = <cfgAlias>$176: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$179: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_31" -> "bb::<Class:ControlFlow>#<static-init>_34" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_33" [
        label = "block[id=33, rubyBlockId=8](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$156: Sorbet::Private::Static::Void, <selfRestore>$157: T.class_of(ControlFlow))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$163: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$166: T.class_of(T) = alias <C T>\l<cfgAlias>$168: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$170: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$164: <Type: T.nilable(Integer)> = <cfgAlias>$166: T.class_of(T).any(<cfgAlias>$168: T.class_of(Integer), <cfgAlias>$170: T.class_of(NilClass))\l<statTemp>$161: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$163: Symbol(:\"a\"), <hashTemp>$164: <Type: T.nilable(Integer)>)\l<cfgAlias>$172: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$160: T::Private::Methods::DeclBuilder = <statTemp>$161: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$172: T.class_of(Integer))\l<blockReturnTemp>$173: T.noreturn = blockreturn<sig> <blockReturnTemp>$160: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_33" -> "bb::<Class:ControlFlow>#<static-init>_30" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_34" [
        label = "block[id=34, rubyBlockId=9](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$178: Sorbet::Private::Static::Void, <selfRestore>$179: T.class_of(ControlFlow))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_34" -> "bb::<Class:ControlFlow>#<static-init>_37" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_34" -> "bb::<Class:ControlFlow>#<static-init>_35" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_35" [
        label = "block[id=35, rubyBlockId=0](<block-pre-call-temp>$178: Sorbet::Private::Static::Void, <selfRestore>$179: T.class_of(ControlFlow))\l<statTemp>$174: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$178, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$179\l<cfgAlias>$199: T.class_of(T::Sig) = alias <C Sig>\l<cfgAlias>$201: T.class_of(T) = alias <C T>\l<statTemp>$196: T.class_of(ControlFlow) = <self>: T.class_of(ControlFlow).extend(<cfgAlias>$199: T.class_of(T::Sig))\l<cfgAlias>$204: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$206: Symbol(:\"orZero0\") = :\"orZero0\"\l<statTemp>$202: Symbol(:\"orZero0\") = <cfgAlias>$204: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$206: Symbol(:\"orZero0\"))\l<cfgAlias>$209: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$211: Symbol(:\"orZero0a\") = :\"orZero0a\"\l<statTemp>$207: Symbol(:\"orZero0a\") = <cfgAlias>$209: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$211: Symbol(:\"orZero0a\"))\l<cfgAlias>$214: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$216: Symbol(:\"orZero0n\") = :\"orZero0n\"\l<statTemp>$212: Symbol(:\"orZero0n\") = <cfgAlias>$214: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$216: Symbol(:\"orZero0n\"))\l<cfgAlias>$219: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$221: Symbol(:\"orZero1n\") = :\"orZero1n\"\l<statTemp>$217: Symbol(:\"orZero1n\") = <cfgAlias>$219: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$221: Symbol(:\"orZero1n\"))\l<cfgAlias>$224: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$226: Symbol(:\"orZero2\") = :\"orZero2\"\l<statTemp>$222: Symbol(:\"orZero2\") = <cfgAlias>$224: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$226: Symbol(:\"orZero2\"))\l<cfgAlias>$229: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$231: Symbol(:\"orZero3\") = :\"orZero3\"\l<statTemp>$227: Symbol(:\"orZero3\") = <cfgAlias>$229: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$231: Symbol(:\"orZero3\"))\l<cfgAlias>$234: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$236: Symbol(:\"orZero3n\") = :\"orZero3n\"\l<statTemp>$232: Symbol(:\"orZero3n\") = <cfgAlias>$234: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$236: Symbol(:\"orZero3n\"))\l<cfgAlias>$239: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$241: Symbol(:\"orZero4\") = :\"orZero4\"\l<statTemp>$237: Symbol(:\"orZero4\") = <cfgAlias>$239: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$241: Symbol(:\"orZero4\"))\l<cfgAlias>$244: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$246: Symbol(:\"orZero5\") = :\"orZero5\"\l<statTemp>$242: Symbol(:\"orZero5\") = <cfgAlias>$244: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$246: Symbol(:\"orZero5\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_35" -> "bb::<Class:ControlFlow>#<static-init>_1" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_37" [
        label = "block[id=37, rubyBlockId=9](<self>: T.class_of(ControlFlow), <block-pre-call-temp>$178: Sorbet::Private::Static::Void, <selfRestore>$179: T.class_of(ControlFlow))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$185: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$188: T.class_of(T) = alias <C T>\l<cfgAlias>$190: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$192: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$186: <Type: T.nilable(Integer)> = <cfgAlias>$188: T.class_of(T).any(<cfgAlias>$190: T.class_of(Integer), <cfgAlias>$192: T.class_of(NilClass))\l<statTemp>$183: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$185: Symbol(:\"a\"), <hashTemp>$186: <Type: T.nilable(Integer)>)\l<cfgAlias>$194: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$182: T::Private::Methods::DeclBuilder = <statTemp>$183: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$194: T.class_of(Integer))\l<blockReturnTemp>$195: T.noreturn = blockreturn<sig> <blockReturnTemp>$182: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_37" -> "bb::<Class:ControlFlow>#<static-init>_34" [style="bold"];
}

}


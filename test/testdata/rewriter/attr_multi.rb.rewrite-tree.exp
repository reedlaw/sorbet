class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Test><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C T>.nilable(<emptyTree>::<C String>))
    end

    def a<<C <todo sym>>>(&<blk>)
      @a
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:"a", <emptyTree>::<C T>.nilable(<emptyTree>::<C String>)).returns(<emptyTree>::<C T>.nilable(<emptyTree>::<C String>))
    end

    def a=<<C <todo sym>>>(a, &<blk>)
      @a = ::T.let(a, <emptyTree>::<C T>.nilable(<emptyTree>::<C String>))
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C T>.nilable(<emptyTree>::<C Integer>))
    end

    def b<<C <todo sym>>>(&<blk>)
      @b
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C T>.nilable(<emptyTree>::<C Integer>))
    end

    def c<<C <todo sym>>>(&<blk>)
      @c
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:"b", <emptyTree>::<C T>.nilable(<emptyTree>::<C Integer>)).returns(<emptyTree>::<C T>.nilable(<emptyTree>::<C Integer>))
    end

    def b=<<C <todo sym>>>(b, &<blk>)
      @b = ::T.let(b, <emptyTree>::<C T>.nilable(<emptyTree>::<C Integer>))
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:"c", <emptyTree>::<C T>.nilable(<emptyTree>::<C Integer>)).returns(<emptyTree>::<C T>.nilable(<emptyTree>::<C Integer>))
    end

    def c=<<C <todo sym>>>(c, &<blk>)
      @c = ::T.let(c, <emptyTree>::<C T>.nilable(<emptyTree>::<C Integer>))
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C String>)
    end

    def d<<C <todo sym>>>(&<blk>)
      @d
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C String>)
    end

    def e<<C <todo sym>>>(&<blk>)
      @e
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.returns(<emptyTree>::<C String>)
    end

    def f<<C <todo sym>>>(&<blk>)
      @f
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:"g", <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def g=<<C <todo sym>>>(g, &<blk>)
      @g = g
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:"h", <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def h=<<C <todo sym>>>(h, &<blk>)
      @h = h
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.params(:"i", <emptyTree>::<C String>).params(:"h", <emptyTree>::<C String>).returns(<emptyTree>::<C String>)
    end

    def i=<<C <todo sym>>>(i, &<blk>)
      @i = i
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    ::Sorbet::Private::Static.keep_def(<self>, :"a")

    ::Sorbet::Private::Static.keep_def(<self>, :"a=")

    ::Sorbet::Private::Static.keep_def(<self>, :"b")

    ::Sorbet::Private::Static.keep_def(<self>, :"c")

    ::Sorbet::Private::Static.keep_def(<self>, :"b=")

    ::Sorbet::Private::Static.keep_def(<self>, :"c=")

    ::Sorbet::Private::Static.keep_def(<self>, :"d")

    ::Sorbet::Private::Static.keep_def(<self>, :"e")

    ::Sorbet::Private::Static.keep_def(<self>, :"f")

    ::Sorbet::Private::Static.keep_def(<self>, :"g=")

    ::Sorbet::Private::Static.keep_def(<self>, :"h=")

    ::Sorbet::Private::Static.keep_def(<self>, :"i=")
  end
end

digraph "rebind.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$8: T.class_of(C) = alias <C C>\l<statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(C))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$13: T.class_of(C) = alias <C C>\l<statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(C))\l<cfgAlias>$17: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$19: T.class_of(B) = alias <C B>\l<statTemp>$15: Sorbet::Private::Static::Void = <cfgAlias>$17: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$19: T.class_of(B))\l<cfgAlias>$22: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$24: T.class_of(B) = alias <C B>\l<statTemp>$20: Sorbet::Private::Static::Void = <cfgAlias>$22: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$24: T.class_of(B))\l<cfgAlias>$28: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$30: T.class_of(A) = alias <C A>\l<statTemp>$26: Sorbet::Private::Static::Void = <cfgAlias>$28: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$30: T.class_of(A))\l<cfgAlias>$33: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$35: T.class_of(A) = alias <C A>\l<statTemp>$31: Sorbet::Private::Static::Void = <cfgAlias>$33: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$35: T.class_of(A))\l<cfgAlias>$39: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$41: T.class_of(Use) = alias <C Use>\l<statTemp>$37: Sorbet::Private::Static::Void = <cfgAlias>$39: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$41: T.class_of(Use))\l<cfgAlias>$44: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$46: T.class_of(Use) = alias <C Use>\l<statTemp>$42: Sorbet::Private::Static::Void = <cfgAlias>$44: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$46: T.class_of(Use))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::C#only_on_C" {
    label = "::C#only_on_C";
    color = blue;
    "bb::C#only_on_C_0" [shape = invhouse];
    "bb::C#only_on_C_1" [shape = parallelogram];

    "bb::C#only_on_C_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: C = cast(<self>: NilClass, C);\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::C#only_on_C_0" -> "bb::C#only_on_C_1" [style="bold"];
    "bb::C#only_on_C_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::C#only_on_C_1" -> "bb::C#only_on_C_1" [style="bold"];
}

subgraph "cluster_::<Class:C>#<static-init>" {
    label = "::<Class:C>#<static-init>";
    color = blue;
    "bb::<Class:C>#<static-init>_0" [shape = invhouse];
    "bb::<Class:C>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:C>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(C) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U C>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U C>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: Symbol(:\"only_on_C\") = :\"only_on_C\"\l<returnMethodTemp>$2: Symbol(:\"only_on_C\") = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(C), <statTemp>$6: Symbol(:\"only_on_C\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:\"only_on_C\")\l<unconditional>\l"
    ];

    "bb::<Class:C>#<static-init>_0" -> "bb::<Class:C>#<static-init>_1" [style="bold"];
    "bb::<Class:C>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:C>#<static-init>_1" -> "bb::<Class:C>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::B#only_on_B" {
    label = "::B#only_on_B";
    color = blue;
    "bb::B#only_on_B_0" [shape = invhouse];
    "bb::B#only_on_B_1" [shape = parallelogram];

    "bb::B#only_on_B_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: B = cast(<self>: NilClass, B);\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::B#only_on_B_0" -> "bb::B#only_on_B_1" [style="bold"];
    "bb::B#only_on_B_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::B#only_on_B_1" -> "bb::B#only_on_B_1" [style="bold"];
}

subgraph "cluster_::<Class:B>#<static-init>" {
    label = "::<Class:B>#<static-init>";
    color = blue;
    "bb::<Class:B>#<static-init>_0" [shape = invhouse];
    "bb::<Class:B>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:B>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(B) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U B>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U B>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(B))\l<selfRestore>$8: T.class_of(B) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:B>#<static-init>_0" -> "bb::<Class:B>#<static-init>_2" [style="bold"];
    "bb::<Class:B>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:B>#<static-init>_1" -> "bb::<Class:B>#<static-init>_1" [style="bold"];
    "bb::<Class:B>#<static-init>_2" [
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(B), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(B))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:B>#<static-init>_2" -> "bb::<Class:B>#<static-init>_5" [style="bold"];
    "bb::<Class:B>#<static-init>_2" -> "bb::<Class:B>#<static-init>_3" [style="tapered"];

    "bb::<Class:B>#<static-init>_3" [
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(B))\l<statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>\l<self>: T.class_of(B) = <selfRestore>$8\l<cfgAlias>$26: T.class_of(T::Sig) = alias <C Sig>\l<cfgAlias>$28: T.class_of(T) = alias <C T>\l<statTemp>$23: T.class_of(B) = <self>: T.class_of(B).extend(<cfgAlias>$26: T.class_of(T::Sig))\l<cfgAlias>$31: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$33: Symbol(:\"only_on_B\") = :\"only_on_B\"\l<statTemp>$29: Symbol(:\"only_on_B\") = <cfgAlias>$31: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(B), <statTemp>$33: Symbol(:\"only_on_B\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:B>#<static-init>_3" -> "bb::<Class:B>#<static-init>_1" [style="bold"];
    "bb::<Class:B>#<static-init>_5" [
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(B), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(B))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$14: Symbol(:\"blk\") = :\"blk\"\l<cfgAlias>$19: T.class_of(T) = alias <C T>\l<statTemp>$17: T.class_of(T.proc) = <cfgAlias>$19: T.class_of(T).proc()\l<cfgAlias>$21: T.class_of(C) = alias <C C>\l<statTemp>$16: T.class_of(T.proc) = <statTemp>$17: T.class_of(T.proc).bind(<cfgAlias>$21: T.class_of(C))\l<hashTemp>$15: T.class_of(T.proc) = <statTemp>$16: T.class_of(T.proc).void()\l<statTemp>$12: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$14: Symbol(:\"blk\"), <hashTemp>$15: T.class_of(T.proc))\l<blockReturnTemp>$11: T::Private::Methods::DeclBuilder = <statTemp>$12: T::Private::Methods::DeclBuilder.void()\l<blockReturnTemp>$22: T.noreturn = blockreturn<sig> <blockReturnTemp>$11: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:B>#<static-init>_5" -> "bb::<Class:B>#<static-init>_2" [style="bold"];
}

subgraph "cluster_::<Class:A>#mySig" {
    label = "::<Class:A>#mySig";
    color = blue;
    "bb::<Class:A>#mySig_0" [shape = invhouse];
    "bb::<Class:A>#mySig_1" [shape = parallelogram];

    "bb::<Class:A>#mySig_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(A) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U A>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U A>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:A>#mySig_0" -> "bb::<Class:A>#mySig_1" [style="bold"];
    "bb::<Class:A>#mySig_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#mySig_1" -> "bb::<Class:A>#mySig_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#<static-init>" {
    label = "::<Class:A>#<static-init>";
    color = blue;
    "bb::<Class:A>#<static-init>_0" [shape = invhouse];
    "bb::<Class:A>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:A>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(A) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U A>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U A>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(A))\l<selfRestore>$8: T.class_of(A) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_0" -> "bb::<Class:A>#<static-init>_2" [style="bold"];
    "bb::<Class:A>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_1" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
    "bb::<Class:A>#<static-init>_2" [
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(A), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:A>#<static-init>_2" -> "bb::<Class:A>#<static-init>_5" [style="bold"];
    "bb::<Class:A>#<static-init>_2" -> "bb::<Class:A>#<static-init>_3" [style="tapered"];

    "bb::<Class:A>#<static-init>_3" [
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A))\l<statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>\l<self>: T.class_of(A) = <selfRestore>$8\l<cfgAlias>$26: T.class_of(T::Sig) = alias <C Sig>\l<cfgAlias>$28: T.class_of(T) = alias <C T>\l<statTemp>$23: T.class_of(A) = <self>: T.class_of(A).extend(<cfgAlias>$26: T.class_of(T::Sig))\l<cfgAlias>$31: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$33: Symbol(:\"mySig\") = :\"mySig\"\l<statTemp>$29: Symbol(:\"mySig\") = <cfgAlias>$31: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(A), <statTemp>$33: Symbol(:\"mySig\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_3" -> "bb::<Class:A>#<static-init>_1" [style="bold"];
    "bb::<Class:A>#<static-init>_5" [
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(A), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(A))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$14: Symbol(:\"blk\") = :\"blk\"\l<cfgAlias>$19: T.class_of(T) = alias <C T>\l<statTemp>$17: T.class_of(T.proc) = <cfgAlias>$19: T.class_of(T).proc()\l<cfgAlias>$21: T.class_of(B) = alias <C B>\l<statTemp>$16: T.class_of(T.proc) = <statTemp>$17: T.class_of(T.proc).bind(<cfgAlias>$21: T.class_of(B))\l<hashTemp>$15: T.class_of(T.proc) = <statTemp>$16: T.class_of(T.proc).void()\l<statTemp>$12: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$14: Symbol(:\"blk\"), <hashTemp>$15: T.class_of(T.proc))\l<blockReturnTemp>$11: T::Private::Methods::DeclBuilder = <statTemp>$12: T::Private::Methods::DeclBuilder.void()\l<blockReturnTemp>$22: T.noreturn = blockreturn<sig> <blockReturnTemp>$11: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:A>#<static-init>_5" -> "bb::<Class:A>#<static-init>_2" [style="bold"];
}

subgraph "cluster_::Use#only_on_Use" {
    label = "::Use#only_on_Use";
    color = blue;
    "bb::Use#only_on_Use_0" [shape = invhouse];
    "bb::Use#only_on_Use_1" [shape = parallelogram];

    "bb::Use#only_on_Use_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Use = cast(<self>: NilClass, Use);\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Use#only_on_Use_0" -> "bb::Use#only_on_Use_1" [style="bold"];
    "bb::Use#only_on_Use_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Use#only_on_Use_1" -> "bb::Use#only_on_Use_1" [style="bold"];
}

subgraph "cluster_::Use#shouldRemoveSelfTemp" {
    label = "::Use#shouldRemoveSelfTemp";
    color = blue;
    "bb::Use#shouldRemoveSelfTemp_0" [shape = invhouse];
    "bb::Use#shouldRemoveSelfTemp_1" [shape = parallelogram];

    "bb::Use#shouldRemoveSelfTemp_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Use = cast(<self>: NilClass, Use);\l<block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: Use.only_on_Use()\l<selfRestore>$5: Use = <self>\l<unconditional>\l"
    ];

    "bb::Use#shouldRemoveSelfTemp_0" -> "bb::Use#shouldRemoveSelfTemp_2" [style="bold"];
    "bb::Use#shouldRemoveSelfTemp_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Use#shouldRemoveSelfTemp_1" -> "bb::Use#shouldRemoveSelfTemp_1" [style="bold"];
    "bb::Use#shouldRemoveSelfTemp_2" [
        label = "block[id=2, rubyBlockId=1](<self>: Use, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Use)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Use#shouldRemoveSelfTemp_2" -> "bb::Use#shouldRemoveSelfTemp_5" [style="bold"];
    "bb::Use#shouldRemoveSelfTemp_2" -> "bb::Use#shouldRemoveSelfTemp_3" [style="tapered"];

    "bb::Use#shouldRemoveSelfTemp_3" [
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Use)\l<returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, only_on_Use>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Use#shouldRemoveSelfTemp_3" -> "bb::Use#shouldRemoveSelfTemp_1" [style="bold"];
    "bb::Use#shouldRemoveSelfTemp_5" [
        label = "block[id=5, rubyBlockId=1](<self>: Use, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Use)\louterLoops: 1\l<self>: Use = loadSelf\l<blockReturnTemp>$8: Integer(1) = 1\l<blockReturnTemp>$9: T.noreturn = blockreturn<only_on_Use> <blockReturnTemp>$8: Integer(1)\l<unconditional>\l"
    ];

    "bb::Use#shouldRemoveSelfTemp_5" -> "bb::Use#shouldRemoveSelfTemp_2" [style="bold"];
}

subgraph "cluster_::Use#jumpBetweenClasses" {
    label = "::Use#jumpBetweenClasses";
    color = blue;
    "bb::Use#jumpBetweenClasses_0" [shape = invhouse];
    "bb::Use#jumpBetweenClasses_1" [shape = parallelogram];

    "bb::Use#jumpBetweenClasses_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Use = cast(<self>: NilClass, Use);\l<cfgAlias>$4: T.class_of(A) = alias <C A>\l<block-pre-call-temp>$5: Sorbet::Private::Static::Void = <cfgAlias>$4: T.class_of(A).mySig()\l<selfRestore>$6: Use = <self>\l<unconditional>\l"
    ];

    "bb::Use#jumpBetweenClasses_0" -> "bb::Use#jumpBetweenClasses_2" [style="bold"];
    "bb::Use#jumpBetweenClasses_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Use#jumpBetweenClasses_1" -> "bb::Use#jumpBetweenClasses_1" [style="bold"];
    "bb::Use#jumpBetweenClasses_2" [
        label = "block[id=2, rubyBlockId=1](<self>: Use, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Use#jumpBetweenClasses_2" -> "bb::Use#jumpBetweenClasses_5" [style="bold"];
    "bb::Use#jumpBetweenClasses_2" -> "bb::Use#jumpBetweenClasses_3" [style="tapered"];

    "bb::Use#jumpBetweenClasses_3" [
        label = "block[id=3, rubyBlockId=0](<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use)\l<returnMethodTemp>$2: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$5, mySig>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Sorbet::Private::Static::Void\l<unconditional>\l"
    ];

    "bb::Use#jumpBetweenClasses_3" -> "bb::Use#jumpBetweenClasses_1" [style="bold"];
    "bb::Use#jumpBetweenClasses_5" [
        label = "block[id=5, rubyBlockId=1](<self>: Use, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use)\louterLoops: 1\l<self>: B = loadSelf\l<statTemp>$10: T.untyped = <self>: B.only_on_Use()\l<statTemp>$12: T.untyped = <self>: B.mySig()\l<block-pre-call-temp>$15: Sorbet::Private::Static::Void = <self>: B.only_on_B()\l<selfRestore>$16: B = <self>\l<unconditional>\l"
    ];

    "bb::Use#jumpBetweenClasses_5" -> "bb::Use#jumpBetweenClasses_6" [style="bold"];
    "bb::Use#jumpBetweenClasses_6" [
        label = "block[id=6, rubyBlockId=2](<self>: B, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use, <block-pre-call-temp>$15: Sorbet::Private::Static::Void, <selfRestore>$16: B)\louterLoops: 2\l<block-call>: NilClass\l"
    ];

    "bb::Use#jumpBetweenClasses_6" -> "bb::Use#jumpBetweenClasses_9" [style="bold"];
    "bb::Use#jumpBetweenClasses_6" -> "bb::Use#jumpBetweenClasses_7" [style="tapered"];

    "bb::Use#jumpBetweenClasses_7" [
        label = "block[id=7, rubyBlockId=1](<self>: B, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use, <block-pre-call-temp>$15: Sorbet::Private::Static::Void, <selfRestore>$16: B)\louterLoops: 1\l<blockReturnTemp>$9: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$15, only_on_B>\l<self>: B = <selfRestore>$16\l<blockReturnTemp>$24: T.noreturn = blockreturn<mySig> <blockReturnTemp>$9: Sorbet::Private::Static::Void\l<unconditional>\l"
    ];

    "bb::Use#jumpBetweenClasses_7" -> "bb::Use#jumpBetweenClasses_2" [style="bold"];
    "bb::Use#jumpBetweenClasses_9" [
        label = "block[id=9, rubyBlockId=2](<self>: B, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Use, <block-pre-call-temp>$15: Sorbet::Private::Static::Void, <selfRestore>$16: B)\louterLoops: 2\l<self>: C = loadSelf\l<statTemp>$20: T.untyped = <self>: C.only_on_B()\l<blockReturnTemp>$19: T.untyped = <self>: C.only_on_C()\l<blockReturnTemp>$23: T.noreturn = blockreturn<only_on_B> <blockReturnTemp>$19: T.untyped\l<unconditional>\l"
    ];

    "bb::Use#jumpBetweenClasses_9" -> "bb::Use#jumpBetweenClasses_6" [style="bold"];
}

subgraph "cluster_::<Class:Use>#<static-init>" {
    label = "::<Class:Use>#<static-init>";
    color = blue;
    "bb::<Class:Use>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Use>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Use>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Use) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Use>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Use>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$6: T.class_of(T::Sig) = alias <C Sig>\l<cfgAlias>$8: T.class_of(T) = alias <C T>\l<statTemp>$3: T.class_of(Use) = <self>: T.class_of(Use).extend(<cfgAlias>$6: T.class_of(T::Sig))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$13: Symbol(:\"only_on_Use\") = :\"only_on_Use\"\l<statTemp>$9: Symbol(:\"only_on_Use\") = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Use), <statTemp>$13: Symbol(:\"only_on_Use\"))\l<cfgAlias>$16: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$18: Symbol(:\"shouldRemoveSelfTemp\") = :\"shouldRemoveSelfTemp\"\l<statTemp>$14: Symbol(:\"shouldRemoveSelfTemp\") = <cfgAlias>$16: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Use), <statTemp>$18: Symbol(:\"shouldRemoveSelfTemp\"))\l<cfgAlias>$21: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$23: Symbol(:\"jumpBetweenClasses\") = :\"jumpBetweenClasses\"\l<statTemp>$19: Symbol(:\"jumpBetweenClasses\") = <cfgAlias>$21: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Use), <statTemp>$23: Symbol(:\"jumpBetweenClasses\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Use>#<static-init>_0" -> "bb::<Class:Use>#<static-init>_1" [style="bold"];
    "bb::<Class:Use>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Use>#<static-init>_1" -> "bb::<Class:Use>#<static-init>_1" [style="bold"];
}

}


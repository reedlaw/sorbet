class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Parent><<C <todo sym>>> < (::<todo sym>)
    def takes_positional<<C <todo sym>>>(arg0, &<blk>)
      <self>.p(arg0)
    end

    def takes_keyword<<C <todo sym>>>(arg0:, &<blk>)
      <self>.p(arg0)
    end

    def takes_two_keyword<<C <todo sym>>>(arg0:, arg1:, &<blk>)
      begin
        <self>.p(arg0)
        <self>.p(arg1)
      end
    end

    def takes_positional_then_keyword<<C <todo sym>>>(arg0, arg1:, &<blk>)
      begin
        <self>.p(arg0)
        <self>.p(arg1)
      end
    end

    def takes_rest<<C <todo sym>>>(*args, &<blk>)
      <self>.p(args)
    end

    def takes_keyword_rest<<C <todo sym>>>(*args:, &<blk>)
      <self>.p(args)
    end

    def takes_block<<C <todo sym>>>(&blk)
      <self>.p(blk)
    end

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_positional")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_keyword")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_two_keyword")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_positional_then_keyword")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_rest")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_keyword_rest")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_block")
  end

  class <emptyTree>::<C Child><<C <todo sym>>> < (<emptyTree>::<C Parent>)
    def takes_positional<<C <todo sym>>>(arg0, &<blk>)
      <self>.super(arg0)
    end

    def takes_keyword<<C <todo sym>>>(arg0:, &<blk>)
      <self>.super(:"arg0", arg0)
    end

    def takes_two_keyword<<C <todo sym>>>(arg0:, arg1:, &<blk>)
      <self>.super(:"arg0", arg0, :"arg1", arg1)
    end

    def takes_positional_then_keyword<<C <todo sym>>>(arg0, arg1:, &<blk>)
      <self>.super(arg0, :"arg1", arg1)
    end

    def takes_rest<<C <todo sym>>>(*args, &<blk>)
      <self>.super()
    end

    def takes_keyword_rest<<C <todo sym>>>(*args:, &<blk>)
      <self>.super()
    end

    def takes_block<<C <todo sym>>>(&blk)
      <self>.super()
    end

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_positional")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_keyword")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_two_keyword")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_positional_then_keyword")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_rest")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_keyword_rest")

    ::Sorbet::Private::Static.keep_def(<self>, :"takes_block")
  end
end

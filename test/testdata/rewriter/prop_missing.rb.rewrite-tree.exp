class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C ForgotTStructOrTProps><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(<emptyTree>::<C Integer>)
    end

    def foo<<C <todo sym>>>(&<blk>)
      begin
        arg2 = <self>.instance_variable_get(:"@foo")
        <self>.class().decorator().prop_get_logic(<self>, :"foo", arg2)
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.params(:"arg0", <emptyTree>::<C Integer>).returns(<emptyTree>::<C Integer>)
    end

    def foo=<<C <todo sym>>>(arg0, &<blk>)
      begin
        if ::T::NonForcingConstants.non_forcing_is_a?(<self>, "::Chalk::ODM::Document")
          ::Chalk::ODM::DocumentDecoratorHelper.soft_freeze_logic(<self>, :"foo")
        else
          <emptyTree>
        end
        <self>.instance_variable_set(:"@foo", arg0)
      end
    end

    ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
      <self>.returns(<emptyTree>::<C Integer>)
    end

    def bar<<C <todo sym>>>(&<blk>)
      begin
        arg2 = <self>.instance_variable_get(:"@bar")
        <self>.class().decorator().prop_get_logic(<self>, :"bar", arg2)
      end
    end

    <self>.prop(:"foo", <emptyTree>::<C Integer>, :"without_accessors", true)

    ::Sorbet::Private::Static.keep_def(<self>, :"foo")

    ::Sorbet::Private::Static.keep_def(<self>, :"foo=")

    <self>.const(:"bar", <emptyTree>::<C Integer>, :"without_accessors", true)

    ::Sorbet::Private::Static.keep_def(<self>, :"bar")
  end
end
